//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/pioooooo/Programming/tsundere/Tsundere/Parser/Tsundere.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tsundere.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TsundereLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TRUE=1, FALSE=2, AP=3, NEG=4, CONJ=5, DISJ=6, IMPL=7, NEXT=8, ALWAYS=9, 
		EVENTUALLY=10, UNTIL=11, LEFT_PAREN=12, RIGHT_PAREN=13, WHITESPACE=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOWERCASE", "DIGIT", "TRUE", "FALSE", "AP", "NEG", "CONJ", "DISJ", "IMPL", 
		"NEXT", "ALWAYS", "EVENTUALLY", "UNTIL", "LEFT_PAREN", "RIGHT_PAREN", 
		"WHITESPACE"
	};


	public TsundereLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TsundereLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", null, "'!'", "'/\\'", "'\\/'", "'->'", "'X'", 
		"'G'", "'F'", "'U'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TRUE", "FALSE", "AP", "NEG", "CONJ", "DISJ", "IMPL", "NEXT", "ALWAYS", 
		"EVENTUALLY", "UNTIL", "LEFT_PAREN", "RIGHT_PAREN", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tsundere.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TsundereLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,84,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
		3,1,4,1,4,4,4,51,8,4,11,4,12,4,52,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,
		1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
		4,15,79,8,15,11,15,12,15,80,1,15,1,15,0,0,16,1,0,3,0,5,1,7,2,9,3,11,4,
		13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,1,0,3,1,0,97,122,
		1,0,48,57,3,0,9,10,13,13,32,32,84,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,1,33,1,0,0,0,3,35,1,0,0,0,5,37,1,0,0,0,7,42,1,0,0,0,9,50,1,0,0,0,11,
		54,1,0,0,0,13,56,1,0,0,0,15,59,1,0,0,0,17,62,1,0,0,0,19,65,1,0,0,0,21,
		67,1,0,0,0,23,69,1,0,0,0,25,71,1,0,0,0,27,73,1,0,0,0,29,75,1,0,0,0,31,
		78,1,0,0,0,33,34,7,0,0,0,34,2,1,0,0,0,35,36,7,1,0,0,36,4,1,0,0,0,37,38,
		5,116,0,0,38,39,5,114,0,0,39,40,5,117,0,0,40,41,5,101,0,0,41,6,1,0,0,0,
		42,43,5,102,0,0,43,44,5,97,0,0,44,45,5,108,0,0,45,46,5,115,0,0,46,47,5,
		101,0,0,47,8,1,0,0,0,48,51,3,1,0,0,49,51,3,3,1,0,50,48,1,0,0,0,50,49,1,
		0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,10,1,0,0,0,54,55,5,
		33,0,0,55,12,1,0,0,0,56,57,5,47,0,0,57,58,5,92,0,0,58,14,1,0,0,0,59,60,
		5,92,0,0,60,61,5,47,0,0,61,16,1,0,0,0,62,63,5,45,0,0,63,64,5,62,0,0,64,
		18,1,0,0,0,65,66,5,88,0,0,66,20,1,0,0,0,67,68,5,71,0,0,68,22,1,0,0,0,69,
		70,5,70,0,0,70,24,1,0,0,0,71,72,5,85,0,0,72,26,1,0,0,0,73,74,5,40,0,0,
		74,28,1,0,0,0,75,76,5,41,0,0,76,30,1,0,0,0,77,79,7,2,0,0,78,77,1,0,0,0,
		79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,83,6,15,0,0,
		83,32,1,0,0,0,4,0,50,52,80,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Tsundere.Parser
